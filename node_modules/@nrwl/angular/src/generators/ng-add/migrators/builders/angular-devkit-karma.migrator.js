"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AngularDevkitKarmaMigrator = void 0;
const devkit_1 = require("@nrwl/devkit");
const devkit_2 = require("@nrwl/devkit");
const typescript_1 = require("@nrwl/workspace/src/utilities/typescript");
const path_1 = require("path");
const utilities_1 = require("../../utilities");
const builder_migrator_1 = require("./builder.migrator");
class AngularDevkitKarmaMigrator extends builder_migrator_1.BuilderMigrator {
    constructor(tree, project, projectConfig, logger) {
        super(tree, '@angular-devkit/build-angular:karma', 'karma', project, projectConfig, logger);
    }
    migrate() {
        for (const [name, target] of this.targets) {
            this.moveFilePathsFromTargetToProjectRoot(target, [
                'karmaConfig',
                'tsConfig',
                'webWorkerTsConfig',
            ]);
            this.updateTargetConfiguration(name, target);
            this.updateTsConfigFileUsedByTestTarget(name, target);
            this.updateCacheableOperations([name]);
        }
        if (!this.targets.size && this.projectConfig.root === '') {
            // there could still be a karma.conf.js file in the root
            // so move to new location
            const karmaConfig = 'karma.conf.js';
            if (this.tree.exists(karmaConfig)) {
                this.logger.info('No "test" target was found, but a root Karma config file was found in the project root. The file will be moved to the new location.');
                this.moveProjectRootFile(karmaConfig);
            }
        }
    }
    validate() {
        const errors = [];
        // TODO(leo): keeping restriction until the full refactor is done and we start
        // expanding what's supported.
        if (this.targets.size > 1) {
            errors.push({
                message: `There is more than one target using a builder that is used to build the project (${(0, utilities_1.arrayToString)([...this.targets.keys()])}).`,
                hint: `Make sure the project only has one target with a builder that is used to build the project.`,
            });
        }
        return errors.length ? errors : null;
    }
    updateTargetConfiguration(targetName, target) {
        if (!target.options) {
            this.logger.warn(`The target "${targetName}" is not specifying any options. Skipping updating the target configuration.`);
            return;
        }
        target.options.main =
            target.options.main && this.convertAsset(target.options.main);
        target.options.polyfills =
            target.options.polyfills && this.convertAsset(target.options.polyfills);
        target.options.tsConfig =
            target.options.tsConfig &&
                (0, devkit_1.joinPathFragments)(this.project.newRoot, (0, path_1.basename)(target.options.tsConfig));
        target.options.karmaConfig =
            target.options.karmaConfig &&
                (0, devkit_1.joinPathFragments)(this.project.newRoot, (0, path_1.basename)(target.options.karmaConfig));
        target.options.assets =
            target.options.assets &&
                target.options.assets.map((asset) => this.convertAsset(asset));
        target.options.styles =
            target.options.styles &&
                target.options.styles.map((style) => this.convertAsset(style));
        target.options.scripts =
            target.options.scripts &&
                target.options.scripts.map((script) => this.convertAsset(script));
        (0, devkit_1.updateProjectConfiguration)(this.tree, this.project.name, Object.assign({}, this.projectConfig));
    }
    updateTsConfigFileUsedByTestTarget(targetName, target) {
        var _a;
        if (!((_a = target.options) === null || _a === void 0 ? void 0 : _a.tsConfig)) {
            this.logger.warn(`The "${targetName}" target does not have the "tsConfig" option configured. Skipping updating the tsConfig file.`);
            return;
        }
        if (!this.tree.exists(target.options.tsConfig)) {
            const originalTsConfigPath = this.originalProjectConfig.targets[targetName].options.tsConfig;
            this.logger.warn(`The tsConfig file "${originalTsConfigPath}" specified in the "${targetName}" target could not be found. Skipping updating the tsConfig file.`);
            return;
        }
        this.updateTsConfigFile(target.options.tsConfig, (0, typescript_1.getRootTsConfigPathInTree)(this.tree), (0, devkit_2.offsetFromRoot)(this.projectConfig.root));
    }
}
exports.AngularDevkitKarmaMigrator = AngularDevkitKarmaMigrator;
//# sourceMappingURL=angular-devkit-karma.migrator.js.map