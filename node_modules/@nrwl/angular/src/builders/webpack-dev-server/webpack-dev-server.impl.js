"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeWebpackDevServerBuilder = void 0;
const tslib_1 = require("tslib");
const architect_1 = require("@angular-devkit/architect");
const build_angular_1 = require("@angular-devkit/build-angular");
const devkit_1 = require("@nrwl/devkit");
const webpack_nx_build_coordination_plugin_1 = require("@nrwl/webpack/src/plugins/webpack-nx-build-coordination-plugin");
const project_graph_1 = require("nx/src/project-graph/project-graph");
const fs_1 = require("fs");
const operators_1 = require("nx/src/project-graph/operators");
const webpack_1 = require("../utilities/webpack");
const lib_1 = require("./lib");
const buildable_libs_1 = require("../utilities/buildable-libs");
function executeWebpackDevServerBuilder(rawOptions, context) {
    var _a, _b, _c, _d, _e;
    process.env.NX_TSCONFIG_PATH = (0, devkit_1.joinPathFragments)(context.workspaceRoot, 'tsconfig.base.json');
    const options = (0, lib_1.normalizeOptions)(rawOptions);
    const parsedBrowserTarget = (0, devkit_1.parseTargetString)(options.browserTarget);
    const browserTargetProjectConfiguration = (0, project_graph_1.readCachedProjectConfiguration)(parsedBrowserTarget.project);
    const buildTarget = browserTargetProjectConfiguration.targets[parsedBrowserTarget.target];
    const buildTargetConfiguration = parsedBrowserTarget.configuration
        ? buildTarget.configurations[parsedBrowserTarget.configuration]
        : buildTarget.defaultConfiguration
            ? buildTarget.configurations[buildTarget.defaultConfiguration]
            : undefined;
    const buildLibsFromSource = (_c = (_b = (_a = options.buildLibsFromSource) !== null && _a !== void 0 ? _a : buildTargetConfiguration === null || buildTargetConfiguration === void 0 ? void 0 : buildTargetConfiguration.buildLibsFromSource) !== null && _b !== void 0 ? _b : buildTarget.options.buildLibsFromSource) !== null && _c !== void 0 ? _c : true;
    const customWebpackConfig = (_d = buildTargetConfiguration === null || buildTargetConfiguration === void 0 ? void 0 : buildTargetConfiguration.customWebpackConfig) !== null && _d !== void 0 ? _d : buildTarget.options.customWebpackConfig;
    let pathToWebpackConfig;
    if (customWebpackConfig && customWebpackConfig.path) {
        pathToWebpackConfig = (0, devkit_1.joinPathFragments)(context.workspaceRoot, customWebpackConfig.path);
        if (!(0, fs_1.existsSync)(pathToWebpackConfig)) {
            throw new Error(`Custom Webpack Config File Not Found!\nTo use a custom webpack config, please ensure the path to the custom webpack file is correct: \n${pathToWebpackConfig}`);
        }
    }
    let dependencies;
    if (!buildLibsFromSource) {
        const buildTargetTsConfigPath = (_e = buildTargetConfiguration === null || buildTargetConfiguration === void 0 ? void 0 : buildTargetConfiguration.tsConfig) !== null && _e !== void 0 ? _e : buildTarget.options.tsConfig;
        const { tsConfigPath, dependencies: foundDependencies } = (0, buildable_libs_1.createTmpTsConfigForBuildableLibs)(buildTargetTsConfigPath, context);
        dependencies = foundDependencies;
        // We can't just pass the tsconfig path in memory to the angular builder
        // function because we can't pass the build target options to it, the build
        // targets options will be retrieved by the builder from the project
        // configuration. Therefore, we patch the method in the context to retrieve
        // the target options to overwrite the tsconfig path to use the generated
        // one with the updated path mappings.
        const originalGetTargetOptions = context.getTargetOptions;
        context.getTargetOptions = (target) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const options = yield originalGetTargetOptions(target);
            options.tsConfig = tsConfigPath;
            return options;
        });
    }
    return (0, build_angular_1.executeDevServerBuilder)(options, context, {
        webpackConfiguration: (baseWebpackConfig) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!buildLibsFromSource) {
                const workspaceDependencies = dependencies
                    .filter((dep) => !(0, operators_1.isNpmProject)(dep.node))
                    .map((dep) => dep.node.name);
                // default for `nx run-many` is --all projects
                // by passing an empty string for --projects, run-many will default to
                // run the target for all projects.
                // This will occur when workspaceDependencies = []
                if (workspaceDependencies.length > 0) {
                    baseWebpackConfig.plugins.push(new webpack_nx_build_coordination_plugin_1.WebpackNxBuildCoordinationPlugin(`nx run-many --target=${parsedBrowserTarget.target} --projects=${workspaceDependencies.join(',')}`));
                }
            }
            if (!pathToWebpackConfig) {
                return baseWebpackConfig;
            }
            return (0, webpack_1.mergeCustomWebpackConfig)(baseWebpackConfig, pathToWebpackConfig, buildTargetConfiguration, context.target);
        }),
    });
}
exports.executeWebpackDevServerBuilder = executeWebpackDevServerBuilder;
exports.default = (0, architect_1.createBuilder)(executeWebpackDevServerBuilder);
//# sourceMappingURL=webpack-dev-server.impl.js.map