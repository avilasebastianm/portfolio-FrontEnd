"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeWebpackServerBuilder = void 0;
const tslib_1 = require("tslib");
const architect_1 = require("@angular-devkit/architect");
const devkit_1 = require("@nrwl/devkit");
const fs_1 = require("fs");
const webpack_1 = require("../utilities/webpack");
const build_angular_1 = require("@angular-devkit/build-angular");
const buildable_libs_1 = require("../utilities/buildable-libs");
function buildServerApp(options, context) {
    const { buildLibsFromSource, customWebpackConfig } = options, delegateOptions = tslib_1.__rest(options, ["buildLibsFromSource", "customWebpackConfig"]);
    // If there is a path to custom webpack config
    // Invoke our own support for custom webpack config
    if (customWebpackConfig && customWebpackConfig.path) {
        const pathToWebpackConfig = (0, devkit_1.joinPathFragments)(context.workspaceRoot, customWebpackConfig.path);
        if ((0, fs_1.existsSync)(pathToWebpackConfig)) {
            return buildServerAppWithCustomWebpackConfiguration(delegateOptions, context, pathToWebpackConfig);
        }
        else {
            throw new Error(`Custom Webpack Config File Not Found!\nTo use a custom webpack config, please ensure the path to the custom webpack file is correct: \n${pathToWebpackConfig}`);
        }
    }
    return (0, build_angular_1.executeServerBuilder)(delegateOptions, context);
}
function buildServerAppWithCustomWebpackConfiguration(options, context, pathToWebpackConfig) {
    return (0, build_angular_1.executeServerBuilder)(options, context, {
        webpackConfiguration: (baseWebpackConfig) => (0, webpack_1.mergeCustomWebpackConfig)(baseWebpackConfig, pathToWebpackConfig, options, context.target),
    });
}
function executeWebpackServerBuilder(options, context) {
    var _a;
    (_a = options.buildLibsFromSource) !== null && _a !== void 0 ? _a : (options.buildLibsFromSource = true);
    if (!options.buildLibsFromSource) {
        const { tsConfigPath } = (0, buildable_libs_1.createTmpTsConfigForBuildableLibs)(options.tsConfig, context);
        options.tsConfig = tsConfigPath;
    }
    return buildServerApp(options, context);
}
exports.executeWebpackServerBuilder = executeWebpackServerBuilder;
exports.default = (0, architect_1.createBuilder)(executeWebpackServerBuilder);
//# sourceMappingURL=webpack-server.impl.js.map